<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>الإشعارات</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;900&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #6c5ce7;
      --primary-dark: #5649c0;
      --secondary-color: #8e7bff;
      --background-color: #f7f9fc;
      --text-color: #2d3748;
      --text-light: #64748b;
      --border-color: #e2e8f0;
      --shadow-color: rgba(108, 92, 231, 0.15);
      --success-color: #2ECC71;
      --error-color: #E74C3C;
      --warning-color: #F39C12;
      --card-bg: #FFFFFF;
      --accent-color: #ff7675;
      --transition: 0.3s ease;
      --border-radius: 12px;
      --box-shadow: 0 4px 20px rgba(108, 92, 231, 0.15);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: "Tajawal", sans-serif;
    }

    body {
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.6;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      width: 100%;
      max-width: 100%;
      margin: 0;
      padding: 0;
    }

    .notifications-container {
      background: var(--card-bg);
      border-radius: 0;
      box-shadow: none;
      overflow: hidden;
      width: 100%;
    }

    .notifications-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      width: 100%;
    }

    .notifications-header h1 {
      font-size: 1.5rem;
      color: var(--primary-color);
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .notification-count {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.9rem;
      font-weight: 700;
    }

    .actions {
      display: flex;
      gap: 0.75rem;
    }

    .btn {
      padding: 0.5rem 1rem;
      border-radius: 8px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      transition: all var(--transition);
    }

    .btn-danger {
      background-color: rgba(231, 76, 60, 0.1);
      color: var(--error-color);
      border: 1px solid rgba(231, 76, 60, 0.3);
    }

    .btn-danger:hover {
      background-color: var(--error-color);
      color: white;
    }

    .btn-primary {
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      color: white;
      border: none;
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, var(--primary-dark), var(--primary-color));
      box-shadow: 0 4px 12px rgba(108, 92, 231, 0.3);
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .notification-list {
      list-style: none;
      width: 100%;
      margin: 0;
      padding: 0;
    }

    .notification-item {
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      gap: 1rem;
      align-items: flex-start;
      transition: all var(--transition);
      position: relative;
      width: 100%;
    }

    .notification-item:last-child {
      border-bottom: none;
    }

    .notification-item.unread {
      background-color: rgba(108, 92, 231, 0.05);
      border-right: 4px solid var(--primary-color);
    }

    .notification-item.viewed {
      opacity: 0.85;
    }

    .notification-item:hover {
      background-color: rgba(108, 92, 231, 0.08);
    }

    .notification-avatar {
      flex-shrink: 0;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      overflow: hidden;
      background-color: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .notification-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .notification-avatar i {
      font-size: 1.2rem;
      color: var(--primary-color);
    }

    .notification-content {
      flex: 1;
      min-width: 0;
    }

    .notification-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }

    .notification-title {
      font-weight: 700;
      color: var(--primary-color);
      font-size: 1rem;
    }

    .notification-time {
      font-size: 0.8rem;
      color: var(--text-light);
    }

    .notification-message {
      color: var(--text-color);
      margin-bottom: 0.5rem;
      line-height: 1.7;
      font-size: 0.9rem;
    }

    .notification-image {
      max-width: 100px;
      max-height: 100px;
      border-radius: 8px;
      margin-top: 0.5rem;
      cursor: pointer;
      transition: transform var(--transition);
    }

    .notification-image:hover {
      transform: scale(1.03);
    }

    .notification-actions {
      display: flex;
      gap: 0.5rem;
    }

    .action-btn {
      background: none;
      border: none;
      color: var(--text-light);
      font-size: 0.9rem;
      cursor: pointer;
      transition: color var(--transition);
      padding: 0.25rem;
    }

    .action-btn:hover {
      color: var(--primary-color);
    }

    .action-btn.delete:hover {
      color: var(--error-color);
    }

    .no-notifications {
      text-align: center;
      padding: 2rem;
      color: var(--text-light);
      width: 100%;
    }

    .no-notifications i {
      font-size: 2.5rem;
      color: var(--primary-color);
      margin-bottom: 0.5rem;
    }

    .no-notifications h3 {
      font-size: 1.2rem;
      margin-bottom: 0.5rem;
    }

    .feedback-message {
      padding: 0.75rem;
      margin: 0.5rem;
      border-radius: var(--border-radius);
      text-align: center;
      font-weight: 600;
      animation: fadeIn 0.3s ease;
      font-size: 0.9rem;
    }

    .message-success {
      background-color: rgba(46, 204, 113, 0.1);
      color: var(--success-color);
      border: 1px solid rgba(46, 204, 113, 0.3);
    }

    .message-error {
      background-color: rgba(231, 76, 60, 0.1);
      color: var(--error-color);
      border: 1px solid rgba(231, 76, 60, 0.3);
    }

    .skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 37%, #f0f0f0 63%);
      background-size: 400% 100%;
      animation: skeleton-loading 1.2s ease-in-out infinite;
      border-radius: 8px;
      margin-bottom: 0.5rem;
    }

    @keyframes skeleton-loading {
      0% { background-position: 100% 50%; }
      100% { background-position: 0 50%; }
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .notifications-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
        padding: 0.75rem;
      }

      .actions {
        width: 100%;
        justify-content: space-between;
      }

      .btn {
        flex: 1;
        justify-content: center;
        padding: 0.5rem;
        font-size: 0.9rem;
      }

      .notification-item {
        padding: 0.75rem;
        flex-direction: column;
      }

      .notification-avatar {
        width: 36px;
        height: 36px;
      }

      .notification-image {
        max-width: 90px;
      }
    }

    @media (max-width: 480px) {
      .notifications-header h1 {
        font-size: 1.2rem;
      }

      .notification-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
      }

      .notification-time {
        font-size: 0.75rem;
      }

      .notification-message {
        font-size: 0.85rem;
      }

      .no-notifications {
        padding: 1.5rem;
      }

      .no-notifications i {
        font-size: 2rem;
      }

      .no-notifications h3 {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <header>
    <%- include('partials/headerhome') %>
    <%- include('partials/headeraction') %>
  </header>

  <main>
    <div class="container">
      <div class="notifications-container">
        <div class="notifications-header">
          <h1>
            <i class="fas fa-bell"></i>
            الإشعارات
            <% if (locals.unreadCount > 0) { %>
              <span class="notification-count"><%= locals.unreadCount %></span>
            <% } %>
          </h1>
          <div class="actions">
            <button class="btn btn-primary" id="mark-all-read-btn" <%= notifications.length === 0 ? 'disabled' : '' %>>
              <i class="fas fa-check-circle"></i> تعيين الكل كمقروء
            </button>
            <button class="btn btn-danger" id="delete-all-btn" <%= notifications.length === 0 ? 'disabled' : '' %>>
              <i class="fas fa-trash"></i> حذف الكل
            </button>
          </div>
        </div>

        <div id="feedback-message-area"></div>

        <ul class="notification-list" id="notification-list">
          <% if (notifications.length === 0) { %>
            <li class="no-notifications">
              <i class="fas fa-bell-slash"></i>
              <h3>لا توجد إشعارات</h3>
              <p>لا توجد إشعارات جديدة لعرضها حالياً</p>
            </li>
          <% } else { %>
            <% notifications.forEach(notification => { %>
              <li class="notification-item <%= notification.viewed ? 'viewed' : 'unread' %>" data-id="<%= notification.id %>">
                <div class="notification-avatar">
                  <% if (notification.sender_avatar) { %>
                    <img src="<%= getCloudinaryImageUrl(notification.sender_avatar, '/uploads/images/pngwing.com.png') %>" 
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                    <i class="fas fa-user" style="display: none;"></i>
                  <% } else { %>
                    <i class="fas fa-user"></i>
                  <% } %>
                </div>
                <div class="notification-content">
                  <div class="notification-header">
                    <span class="notification-title"><%= notification.sender_name || 'النظام' %></span>
                    <span class="notification-time">
                      <%= new Date(notification.created_at).toLocaleString('ar-EG', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      }) %>
                    </span>
                  </div>
                  <p class="notification-message"><%= notification.message %></p>
                  <% if (notification.image_url) { %>
                    <img src="<%= getCloudinaryImageUrl(notification.image_url, '') %>" 
                         class="notification-image" 
                         onerror="this.style.display='none'">
                  <% } %>
                </div>
                <div class="notification-actions">
                  <button class="action-btn delete" data-notification-id="<%= notification.id %>" title="حذف">
                    <i class="fas fa-trash"></i>
                  </button>
                  <% if (!notification.viewed) { %>
                    <button class="action-btn mark-read" data-notification-id="<%= notification.id %>" title="تعيين كمقروء">
                      <i class="fas fa-check"></i>
                    </button>
                  <% } %>
                </div>
              </li>
            <% }) %>
          <% } %>
        </ul>
      </div>
    </div>
  </main>

  <footer style="margin-top: auto;">
    <%- include('partials/footer') %>
  </footer>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elements
      const notificationList = document.getElementById('notification-list');
      const feedbackArea = document.getElementById('feedback-message-area');
      const deleteAllBtn = document.getElementById('delete-all-btn');
      const markAllReadBtn = document.getElementById('mark-all-read-btn');
      const notificationCount = document.querySelector('.notification-count');
      let lastNotificationTimestamp = <%= notifications.length > 0 ? new Date(notifications[0].created_at).getTime() : 0 %>;
      let pollingInterval;

      // Display feedback message
      function showFeedback(message, type = 'success') {
        const messageDiv = document.createElement('div');
        messageDiv.className = `feedback-message message-${type}`;
        messageDiv.textContent = message;
        feedbackArea.innerHTML = '';
        feedbackArea.appendChild(messageDiv);
        
        setTimeout(() => {
          messageDiv.style.opacity = '0';
          setTimeout(() => messageDiv.remove(), 500);
        }, 4000);
      }

      // Update notification count
      function updateNotificationCount(count) {
        if (count > 0) {
          if (notificationCount) {
            notificationCount.textContent = count;
            notificationCount.style.display = 'inline-block';
          }
        } else {
          if (notificationCount) {
            notificationCount.style.display = 'none';
          }
        }
        
        // Update header count if exists
        const headerCount = document.getElementById('header-notification-count');
        if (headerCount) {
          if (count > 0) {
            headerCount.textContent = count;
            headerCount.style.display = 'inline-block';
          } else {
            headerCount.style.display = 'none';
          }
        }
      }

      // Mark notification as read
      async function markAsRead(notificationId) {
        try {
          const response = await fetch(`/notifications/mark-as-read/${notificationId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            const item = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
            if (item) {
              item.classList.remove('unread');
              item.classList.add('viewed');
              item.querySelector('.mark-read')?.remove();
              
              // Update count
              const currentCount = parseInt(notificationCount?.textContent || '0');
              if (currentCount > 0) {
                updateNotificationCount(currentCount - 1);
              }
            }
          }
        } catch (error) {
          console.error('Error marking notification as read:', error);
        }
      }

      // Delete notification
      async function deleteNotification(notificationId) {
        try {
          const response = await fetch(`/notifications/delete/${notificationId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            const item = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
            if (item) {
              item.style.transition = 'opacity 0.3s ease';
              item.style.opacity = '0';
              
              setTimeout(() => {
                item.remove();
                
                // Check if no notifications left
                if (notificationList.querySelectorAll('.notification-item').length === 0) {
                  notificationList.innerHTML = `
                    <li class="no-notifications">
                      <i class="fas fa-bell-slash"></i>
                      <h3>لا توجد إشعارات</h3>
                      <p>لا توجد إشعارات جديدة لعرضها حالياً</p>
                    </li>
                  `;
                  
                  if (deleteAllBtn) deleteAllBtn.disabled = true;
                  if (markAllReadBtn) markAllReadBtn.disabled = true;
                }
                
                // Update count if notification was unread
                if (item.classList.contains('unread')) {
                  const currentCount = parseInt(notificationCount?.textContent || '0');
                  if (currentCount > 0) {
                    updateNotificationCount(currentCount - 1);
                  }
                }
              }, 300);
            }
            
            showFeedback('تم حذف الإشعار بنجاح', 'success');
          } else {
            throw new Error(result.message || 'Failed to delete notification');
          }
        } catch (error) {
          console.error('Error deleting notification:', error);
          showFeedback(error.message || 'حدث خطأ أثناء حذف الإشعار', 'error');
        }
      }

      // Mark all notifications as read
      async function markAllAsRead() {
        try {
          const response = await fetch('/notifications/mark-all-read', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            document.querySelectorAll('.notification-item.unread').forEach(item => {
              item.classList.remove('unread');
              item.classList.add('viewed');
              item.querySelector('.mark-read')?.remove();
            });
            
            updateNotificationCount(0);
            showFeedback('تم تعيين جميع الإشعارات كمقروءة', 'success');
          } else {
            throw new Error(result.message || 'Failed to mark all as read');
          }
        } catch (error) {
          console.error('Error marking all notifications as read:', error);
          showFeedback(error.message || 'حدث خطأ أثناء تعيين الإشعارات كمقروءة', 'error');
        }
      }

      // Delete all notifications
      async function deleteAllNotifications() {
        if (!confirm('هل أنت متأكد من حذف جميع الإشعارات؟ لا يمكن التراجع عن هذا الإجراء.')) {
          return;
        }
        
        try {
          const response = await fetch('/notifications/delete-all', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            notificationList.innerHTML = `
              <li class="no-notifications">
                <i class="fas fa-bell-slash"></i>
                <h3>لا توجد إشعارات</h3>
                <p>لا توجد إشعارات جديدة لعرضها حالياً</p>
              </li>
            `;
            
            if (deleteAllBtn) deleteAllBtn.disabled = true;
            if (markAllReadBtn) markAllReadBtn.disabled = true;
            
            updateNotificationCount(0);
            showFeedback('تم حذف جميع الإشعارات بنجاح', 'success');
          } else {
            throw new Error(result.message || 'Failed to delete all notifications');
          }
        } catch (error) {
          console.error('Error deleting all notifications:', error);
          showFeedback(error.message || 'حدث خطأ أثناء حذف جميع الإشعارات', 'error');
        }
      }

      // Fetch new notifications
      async function fetchNewNotifications() {
        try {
          const response = await fetch(`/notifications/get-new?lastTimestamp=${lastNotificationTimestamp}`);
          const result = await response.json();
          
          if (result.notifications && result.notifications.length > 0) {
            // Update last timestamp
            lastNotificationTimestamp = Math.max(
              lastNotificationTimestamp,
              ...result.notifications.map(n => new Date(n.created_at).getTime())
            );
            
            // Remove "no notifications" message if exists
            const noNotifications = notificationList.querySelector('.no-notifications');
            if (noNotifications) {
              noNotifications.remove();
            }
            
            // Add new notifications
            result.notifications.forEach(notification => {
              const notificationItem = document.createElement('li');
              notificationItem.className = 'notification-item unread';
              notificationItem.dataset.id = notification.id;
              
              notificationItem.innerHTML = `
                <div class="notification-avatar">
                  ${notification.sender_avatar ? 
                    `<img src="${getCloudinaryImageUrl(notification.sender_avatar, '/uploads/images/pngwing.com.png')}" 
                          onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                     <i class="fas fa-user" style="display: none;"></i>` : 
                    `<i class="fas fa-user"></i>`}
                </div>
                <div class="notification-content">
                  <div class="notification-header">
                    <span class="notification-title">${notification.sender_name || 'النظام'}</span>
                    <span class="notification-time">
                      ${new Date(notification.created_at).toLocaleString('ar-EG', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                  <p class="notification-message">${notification.message}</p>
                  ${notification.image_url ? 
                    `<img src="${getCloudinaryImageUrl(notification.image_url, '')}" 
                          class="notification-image" 
                          onerror="this.style.display='none'">` : ''}
                </div>
                <div class="notification-actions">
                  <button class="action-btn delete" data-notification-id="${notification.id}" title="حذف">
                    <i class="fas fa-trash"></i>
                  </button>
                  <button class="action-btn mark-read" data-notification-id="${notification.id}" title="تعيين كمقروء">
                    <i class="fas fa-check"></i>
                  </button>
                </div>
              `;
              
              notificationList.prepend(notificationItem);
            });
            
            // Update count
            if (result.unreadCount !== undefined) {
              updateNotificationCount(result.unreadCount);
            }
            
            // Enable buttons if they were disabled
            if (deleteAllBtn) deleteAllBtn.disabled = false;
            if (markAllReadBtn) markAllReadBtn.disabled = false;
          }
        } catch (error) {
          console.error('Error fetching new notifications:', error);
        }
      }

      // Event listeners
      notificationList.addEventListener('click', (e) => {
        const deleteBtn = e.target.closest('.action-btn.delete');
        const markReadBtn = e.target.closest('.action-btn.mark-read');
        
        if (deleteBtn) {
          e.preventDefault();
          const notificationId = deleteBtn.dataset.notificationId;
          deleteNotification(notificationId);
        } else if (markReadBtn) {
          e.preventDefault();
          const notificationId = markReadBtn.dataset.notificationId;
          markAsRead(notificationId);
        }
      });

      if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', (e) => {
          e.preventDefault();
          markAllAsRead();
        });
      }

      if (deleteAllBtn) {
        deleteAllBtn.addEventListener('click', (e) => {
          e.preventDefault();
          deleteAllNotifications();
        });
      }

      // Start polling for new notifications (every 30 seconds)
      if (window.location.pathname === '/notifications') {
        pollingInterval = setInterval(fetchNewNotifications, 30000);
      }

      // Clean up on page unload
      window.addEventListener('beforeunload', () => {
        if (pollingInterval) {
          clearInterval(pollingInterval);
        }
      });

      // Initial check for new notifications
      fetchNewNotifications();
    });

    <% function getCloudinaryImageUrl(image, fallback) { 
      return image && image.startsWith('http') ? image : (fallback || '/uploads/images/pngwing.com.png'); 
    } %>
  </script>
</body>
</html>